1. SET MATRIX ZERO :
------------------
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int x,y;
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                if(matrix[i][j]==0)
                {
                 x=i;
                 y=j; 
                     for(int j=0;j<matrix[0].size();j++)
                        { if(matrix[x][j]!=0)
                          matrix[x][j]=-10;
                       }
                     for(int i=0;i<matrix.size();i++)
                        {if(matrix[i][y]!=0)
                matrix[i][y]=-10;
                       }  
                 }
                
            }
        }
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                if(matrix[i][j]==-10)
                {
               matrix[i][j]=0;
               }
               }
               }
    }
};


2. PASCAL'S TRIANGLE :
-------------------------
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int x,y;
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                if(matrix[i][j]==0)
                {
                 x=i;
                 y=j; 
                     for(int j=0;j<matrix[0].size();j++)
                        { if(matrix[x][j]!=0)
                          matrix[x][j]=-10;
                       }
                     for(int i=0;i<matrix.size();i++)
                        {if(matrix[i][y]!=0)
                matrix[i][y]=-10;
                       }  
                 }
                
            }
        }
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                if(matrix[i][j]==-10)
                {
               matrix[i][j]=0;
               }
               }
               }
    }
};


4. KADANE'S ALGORITHM:
-----------------------
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int cursum=0;
        int maxsum=INT_MIN;
        for(int i=0;i<nums.size();i++)
        {   cursum+=nums[i];
            if(cursum>maxsum)
            maxsum=cursum;
            if(cursum<0)
            cursum=0;
        }
        return maxsum;
    }
};


5. SORT 0'S, 1'S AND 2'S :
--------------------------
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int c1=0,c2=0,c3=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0)
            c1++;
            if(nums[i]==1)
            c2++;
            if(nums[i]==2)
            c3++;
        }
        for(int i=0;i<c1;i++)
        {
            nums[i]=0;
        }
        for(int i=c1;i<(c1+c2);i++)
        {
            nums[i]=1;
        }
        for(int i=(c1+c2);i<(c1+c2+c3);i++)
        {
            nums[i]=2;
        }
        
    }
};


6. STOCK BUY AND SELL : 
-----------------------
class Solution {
public:
    int maxProfit(vector<int>& prices)
    {
    if (prices.size() == 1) return 0;

        int low = 0;
        int maxprofit = 0;

        for (int i = 0; i < prices.size(); ++i) {
            if (prices[i] < prices[low]) {
                low = i;
            }
            maxprofit= max(maxprofit, prices[i] - prices[low]);
        }
        return maxprofit;
    }
};



